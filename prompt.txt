学生向けアンケート・ポイント交換プラットフォームを作成してください。

【事前設計されたデータベーススキーマ】
以下のSupabase PostgreSQLスキーマを使用してください：

-- ユーザー管理
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR UNIQUE NOT NULL,
    username VARCHAR UNIQUE NOT NULL,
    points INTEGER DEFAULT 0,
    reputation_score INTEGER DEFAULT 100,
    is_banned BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- カテゴリ
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR NOT NULL,
    slug VARCHAR UNIQUE NOT NULL,
    description TEXT
);

-- アンケート
CREATE TABLE surveys (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    creator_id UUID REFERENCES users(id),
    title VARCHAR NOT NULL,
    description TEXT,
    category_id INTEGER REFERENCES categories(id),
    reward_points INTEGER NOT NULL,
    total_budget INTEGER NOT NULL, -- 総予算
    max_responses INTEGER,
    current_responses INTEGER DEFAULT 0,
    status VARCHAR DEFAULT 'active', -- active, paused, closed
    is_data_for_sale BOOLEAN DEFAULT false,
    data_price INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- アンケート質問
CREATE TABLE survey_questions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    survey_id UUID REFERENCES surveys(id) ON DELETE CASCADE,
    question_text TEXT NOT NULL,
    question_type VARCHAR NOT NULL, -- multiple_choice, text, rating, etc.
    options JSONB, -- 選択肢データ
    is_required BOOLEAN DEFAULT true,
    order_index INTEGER NOT NULL
);

-- アンケート回答
CREATE TABLE survey_responses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    survey_id UUID REFERENCES surveys(id),
    respondent_id UUID REFERENCES users(id),
    responses JSONB NOT NULL, -- 回答データ
    quality_score FLOAT, -- Gemini APIによる品質スコア
    is_approved BOOLEAN DEFAULT false,
    submitted_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(survey_id, respondent_id) -- 重複回答防止
);

-- ポイント取引履歴
CREATE TABLE point_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    amount INTEGER NOT NULL, -- 正数=獲得、負数=消費
    transaction_type VARCHAR NOT NULL, -- survey_reward, survey_creation, data_purchase, event_entry
    related_id UUID, -- 関連するsurvey_id等
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- データ販売
CREATE TABLE data_sales (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    survey_id UUID REFERENCES surveys(id),
    buyer_id UUID REFERENCES users(id),
    seller_id UUID REFERENCES users(id),
    price INTEGER NOT NULL,
    purchased_at TIMESTAMP DEFAULT NOW()
);

-- 抽選イベント
CREATE TABLE lottery_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR NOT NULL,
    description TEXT,
    entry_cost INTEGER NOT NULL,
    prize_description TEXT,
    max_participants INTEGER,
    current_participants INTEGER DEFAULT 0,
    end_date TIMESTAMP NOT NULL,
    status VARCHAR DEFAULT 'active'
);

-- 抽選参加
CREATE TABLE lottery_entries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id UUID REFERENCES lottery_events(id),
    user_id UUID REFERENCES users(id),
    entered_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(event_id, user_id)
);

-- 通報システム
CREATE TABLE reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    reporter_id UUID REFERENCES users(id),
    reported_user_id UUID REFERENCES users(id),
    reported_content_type VARCHAR NOT NULL, -- survey, response, user
    reported_content_id UUID,
    reason VARCHAR NOT NULL,
    description TEXT,
    status VARCHAR DEFAULT 'pending', -- pending, resolved, dismissed
    created_at TIMESTAMP DEFAULT NOW()
);


【技術スタック】
・フロントエンド: Next.js + TypeScript + Tailwind CSS
・バックエンド: FastAPI + Python
・データベース: Supabase (PostgreSQL)
・認証: Supabase Auth
・API連携: Gemini API（アンケート回答妥当性チェック）
・コンテナ: Docker + docker-compose
・データ可視化: matplotlib/seaborn/plotly

【核心機能】
1. アンケート回答でポイント獲得システム
2. ポイント消費でアンケート作成（消費量→還元率連動）
3. 収集データのポイント販売機能（ダウンロード収益分配）
4. ポイント消費抽選イベント参加
5. CSV データエクスポート

【必須追加機能】
・アンケートカテゴリ分類・検索システム
・重複参加防止機能（ユーザーID + アンケートID管理）
・ユーザー通報・制裁システム
・回答データの基本可視化（グラフ・チャート生成）
・データ購入前のサンプル表示機能

【必須画面構成】
1. 認証（Supabase Auth使用）
2. ダッシュボード（ポイント + 統計表示）
3. アンケート一覧（カテゴリ絞り込み・検索）
4. アンケート回答画面（Gemini API品質チェック）
5. アンケート作成画面（ポイント設定・カテゴリ選択）
6. データマーケット（サンプル表示・購入機能）
7. データ分析画面（可視化チャート）
8. 抽選イベント画面
9. 管理画面（通報処理）

【Docker構成】
・フロントエンド（Next.js）コンテナ
・バックエンド（FastAPI）コンテナ  
・開発用docker-compose.yml

【重要実装ポイント】
・Supabaseの認証・DB機能フル活用
・FastAPIでデータ分析エンドポイント実装
・重複防止の適切なDB設計
・レスポンシブ対応

【重要な制約】
・ポイント経済システムの整合性確保（point_transactionsテーブル活用）
・重複回答防止（survey_responsesのUNIQUE制約）
・データ販売の権限管理（survey作成者のみ販売可能）
・通報システムの管理画面実装

完全動作状態で、docker-compose upで起動できるように実装してください。